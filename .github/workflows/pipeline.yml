name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  # sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 22

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run SonarQube analysis
  #       uses: SonarSource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}

  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: sonarqube
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #     - name: Build Docker image
  #       run: docker build -t my-app:latest .

  #     - name: Push Docker image
  #       run: docker push my-app:latest

  # trivy-scan:
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run Trivy scan
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: my-app:latest
  #         format: 'table'
  #         exit-code: '1'
  #         severity: 'CRITICAL'

  #deploy:
    #runs-on: ubuntu-latest
    #needs: trivy-scan
    #steps:
      #- name: Checkout code
      #  uses: actions/checkout@v3

      #- name: Deploy to Fly.io
        #run: |
          #curl -L https://fly.io/install.sh | sh
          #export FLYCTL_INSTALL="/root/.fly"
          #export PATH="$FLYCTL_INSTALL/bin:$PATH"
          #flyctl auth token ${{ secrets.FLY_API_TOKEN }}
          #flyctl deploy --image my-app:latest