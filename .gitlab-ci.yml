stages:
  - lint
  - build
  - test
  - sonarqube
  - docker-build
  - trivy-scan
#  - deploy

variables:
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest
  SONARQUBE_VERSION: "LATEST_RELEASE"
  TRIVY_VERSION: "latest"

cache:
  paths:
    - node_modules/
    - .npm
  key: ${CI_COMMIT_REF_SLUG}

# Job per il linting del codice
lint:
  stage: lint
  image: node:22
  script:
    - npm ci
    - npm run lint
    - npm run format -- --check

# Job per la build del progetto
build:
  stage: build
  image: node:22
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

# Job per i test unitari con copertura
test:
  stage: test
  image: node:22
  script:
    - npm ci
    - npm run test:unit -- --coverage
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      cobertura: coverage/cobertura-coverage.xml

# Analisi del codice con SonarQube
sonarqube:
  stage: sonarqube
  image: sonarsource/sonarqube-scanner:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_SCANNER_OPTS: "-Dproject.settings=sonar-project.properties"
  script:
    - sonar-scanner
  dependencies:
    - test
  only:
    - merge_requests
    - master
    - main

# Build dell'immagine Docker
docker-build:
  stage: docker-build
  image: docker:20.10.24
  services:
    - docker:20.10.24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG

# Security scan con Trivy
trivy-scan:
  stage: trivy-scan
  image: aquasec/trivy:$TRIVY_VERSION
  script:
    - trivy image --exit-code 1 --severity CRITICAL $DOCKER_IMAGE_TAG
  dependencies:
    - docker-build

# Deployment su ambiente di hosting
#deploy:
#  stage: deploy
#  image: alpine:3.19
#  before_script:
#    - apk add --no-cache curl
#  script:
#    - |
#      # Esempio per Fly.io (sostituire con il proprio deployment script)
#      curl -L https://fly.io/install.sh | sh
#      export FLYCTL_INSTALL="/root/.fly"
#      export PATH="$FLYCTL_INSTALL/bin:$PATH"
#      flyctl auth token $FLY_API_TOKEN
#      flyctl deploy --image $DOCKER_IMAGE_TAG
#  only:
#    - main
#    - master